id,author,text,time,parent
41070333,Smaug123,"So I am extremely hyped about this, but it&#x27;s not clear to me how much heavy lifting this sentence is doing:<p>&gt; First, the problems were manually translated into formal mathematical language for our systems to understand.<p>The non-geometry problems which were solved were all of the form &quot;Determine all X such that…&quot;, and the resulting theorem statements are all of the form &quot;We show that the set of all X is {foo}&quot;. The downloadable solutions from <a href=""https:&#x2F;&#x2F;storage.googleapis.com&#x2F;deepmind-media&#x2F;DeepMind.com&#x2F;Blog&#x2F;imo-2024-solutions&#x2F;index.html"" rel=""nofollow"">https:&#x2F;&#x2F;storage.googleapis.com&#x2F;deepmind-media&#x2F;DeepMind.com&#x2F;B...</a> don&#x27;t make it clear whether the set {foo} was decided by a human during this translation step, or whether the computer found it. I <i>want</i> to believe that the computer found it, but I can&#x27;t find anything to confirm. Anyone know?",2024-07-25 18:29:41,41069829
41069970,adverbly,"&gt; First, the problems were manually translated into formal mathematical language for our systems to understand. In the official competition, students submit answers in two sessions of 4.5 hours each. Our systems solved one problem within minutes and took up to three days to solve the others.<p>Three days is interesting... Not technically silver medal performance I guess, but let&#x27;s be real I&#x27;d be okay waiting a month for the cure to cancer.",2024-07-25 18:29:41,41069829
41070315,golol,This is the real deal. AlphaGeometry solved a very limited set of problems with a lot of brute force search. This is a much broader method that I believe will have a great impact on the way we do mathematics. They are really implementing a self-feeding pipeling from natural language mathematics to formalized mathematics where they can train both formalization and proving. In principle this pipeline can also learn basic theory building like creating auxilliary definitions and Lemmas. I really think this is the holy grail of proof-assistance and will allow us to formalize most mathematics that we create very naturally. Humans will work podt-rigorously and let the machine asisst with filling in the details.,2024-07-25 18:29:41,41069829
41070218,Ericson2314,The lede is a bit buried: they&#x27;re using Lean!<p>This is important for more than Math problems. Making ML models wrestle with proof systems is a good way to avoid bullshit in general.<p>Hopefully more humans write types in Lean and similar systems as a much way of writing prompts.,2024-07-25 18:29:41,41069829
41070172,osti,"So they weren&#x27;t able to solve the combinatorics problem. I&#x27;m not super well versed in competition math, but combinatorics always seem to be the most interesting problems to me.",2024-07-25 18:29:41,41069829
41070346,,,2024-07-25 17:41:26,41069256
41070079,andrewmcwatters,"Hmm, yeah I don&#x27;t know. This reads like a lot of fluff or immediately unimportant stuff.<p>Reverse engineering in the real world takes a few forms, some of which the write takes on too briefly towards the end of the material. Applied reverse engineer is usually modifying an existing piece of software so:<p><pre><code>    * .dll&#x2F;lib injection
    * signature scanning and patching
    * packet interception and rewriting
    * mitm HTTP(s) calls
</code></pre>
These are just a few places where you see reverse engineering used, usually to modify existing software.<p>I&#x27;m curious if there&#x27;s any reading out there that covers this stuff from the meat and potatoes and less of this CS 101 stuff.<p>I&#x27;ve done all of the above, and you can usually learn about this stuff from some different forums on the web, but I don&#x27;t know of any good bibles on the subject matter.",2024-07-25 17:41:26,41069256
41069823,kstrauser,"So you’re setting up a multi-region RDS. If region A goes down, do you continue to accept writes to region B?<p>A bank: No! If region A goes down, do <i>not</i> process updates in B until A is back up! We’d rather be down than wrong!<p>A web forum: Yes! We can reconcile later when A comes back up. Until then keep serving traffic!<p>CAP theorem doesn’t let you treat the cloud as a magic infinite availability box. You still have to design your system to pick the appropriate behavior <i>when</i> something breaks. No one without deep insight into your business needs can decide for you, either. You’re on the hook for choosing.",2024-07-25 17:52:38,41069403
41069878,mordae,"You wish.<p>&gt; DNS, multi-cast, or some other mechanism directs them towards a healthy load balancer on the healthy side of the partition<p>Incidentally that&#x27;s where CAP makes it&#x27;s appearance and bites your ass.<p>No amount of VRRP, UCARP wishful thinking can guarantee a conclusion on what partition is &quot;correct&quot; in presence of a network partition between load balancer nodes.<p>Also, who determines where to point the DNS? A single point of failure VPS? Or perhaps a group of distributed machines voting? Yeah.<p>You still need to perform the analysis. It&#x27;s just that some cloud providers offer the distributed voting clusters as a service and take care of the DNS and load balancer switchover for you.<p>And that&#x27;s still not enough, because you might not want to allow stragglers write to orphan databases before the whole network fencing kicks in.",2024-07-25 17:52:38,41069403
41070156,bunderbunder,"I once lost an entire Christmas vacation to fixing up the damage caused when an Elasticsearch cluster running in AWS responded poorly to a network partition event and started producing results that ruined our users&#x27; day (and business records) in a &quot;costing millions of dollars&quot; kind of way.<p>It was a very old version of ES, and the specific behavior that led to the problem has been fixed for a long time now. But still, the fact that something like this can happen in a cloud deployment demonstrates that this article&#x27;s advice rests on an egregiously simplistic perspective on the possible failure modes of distributed systems.<p>In particular, the major premise that intermittent connectivity is only a problem on internetworks is just plain wrong. Hubs and switches flake out. Loose wires get jiggled. Subnetworks get congested.<p>And if you&#x27;re on the cloud, nobody even tries to pretend that they&#x27;ll tell you when server and equipment maintenance is going to happen.",2024-07-25 17:52:38,41069403
41069923,throwaway71271,"When I design systems I just think about tiny traitor generals and their sneaky traitor messengers racing in the war, their clocks are broken, and some of them are deaf, blind or both.<p>CAP or no CAP, chaos will reign.<p>I think FLP (<a href=""https:&#x2F;&#x2F;groups.csail.mit.edu&#x2F;tds&#x2F;papers&#x2F;Lynch&#x2F;jacm85.pdf"" rel=""nofollow"">https:&#x2F;&#x2F;groups.csail.mit.edu&#x2F;tds&#x2F;papers&#x2F;Lynch&#x2F;jacm85.pdf</a>) is better way to think about systems.<p>I think CAP is not as relevant in the cloud because the complexity is so high that nobody even knows what is going on, so the just C part, regardless of the other letters, is ridiculously difficult even on a single computer. A book can be written just to explain write(2)&#x27;s surprise attacks.<p>So you think you have guarantees whatever the designers said they have AP or CP, and yet.. the impossible will happen twice a day (and 3 times at night when its your on-call).",2024-07-25 17:52:38,41069403
41069932,killjoywashere,"The military lives in this world and will likely encourage people to continue thinking about it. Think about wearables on a submarine, as an example. Does the captain want to know his crew is fatigued, about to get sick, getting less exercise than they did on their last deployment? Yes. Can you talk to a cloud? No. Does the Admiral in Hawaii want to know those same answers about that boat, and every boat in the Group, eventually? Yes. For this situation, datacenter-aware databases are great. There are other solutions for other problems.",2024-07-25 17:52:38,41069403
41070301,jes5199,"nice! I have needed this before. I think you&#x27;re using the Meeus algorithm from Astronomical Algorithms? it&#x27;s a classic, great choice",2024-07-25 18:17:01,41069681
41070130,unilynx,"If this feature ever becomes the default (ie not behind a flag) - how will the NPM ecosystem respond? Will contributors still bother to build CJS end EJS versions when publishing a NPM module, or just slap an &#x27;engine: nodejs &gt;= 25&#x27; on the package.json and stop bothering with the build step before pushing to NPM ?<p>I <i>personally</i> would very much prefer if NPM modules that have their original code in TS and are currently transpiling would stop shipping dist&#x2F;<i>.cjs so I unambiguously know where to put my debugger&#x2F;console.log statements. And it would probably be very tempting to NPM contributors to not have to bother with a build step anymore.<p>But won&#x27;t this start a ripple effect through NPM where everyone will start to assume very quickly &#x27;everyone accepts TS files&#x27; - it only takes one of your dependencies for this effect to ripple through? It seems to me that nodejs can&#x27;t move this outside an opt-in-experimental-flag without the whole community implicitly expecting all consumers to accept TS files before you know it. And if they do, it will be just months before Firefox and Safari will be force to accept it too, so all JS compilers will have to discard TS type annotations<p>Which I would personally be happy with - we&#x27;re building transcompiling steps into NPM modules that convert the ts code into js and d.ts just to support some hypothetical JS user even though we&#x27;re using TS on the including side. But if node accepts </i>.ts files we could just remove those transpiling steps without ever noticing it... so what&#x27;s stopping NPM publishers from publishing js&#x2F;d.ts files without noticing they broke anything?",2024-07-25 05:57:37,41064351
41065376,zarzavat,"One thing to note is that it is impossible to strip types from TypeScript without a grammar of TypeScript. Stripping types is not a token-level operation, and the TypeScript grammar is changing all the time.<p>Consider for example: `foo &lt; bar &amp; baz &gt; ( x )`. In TypeScript 1.5 this parsed as (foo&lt;bar) &amp; (baz &gt; (x)) because bar&amp;baz wasn’t a valid type expression yet. When the type intersection operator was added, the parse changed to foo&lt;(bar &amp; baz)&gt;(x) which desugared to foo(x). I realise I’m going back in time here but it’s a nice simple example.<p>If you want to continue to use new TypeScript features you are going to need to keep compiling to JS, or else keep your node version up to date. For people who like to stick on node LTS releases this may be an unacceptable compromise.",2024-07-25 05:57:37,41064351
41064729,pansa2,"If Node.js can run TypeScript files directly, then the TypeScript compiler won&#x27;t need to strip types and convert to JavaScript - it could be used solely as a type checker. This would be similar to the situation in Python, where type checkers check types and leave them intact, and the Python interpreter just ignores them.<p>It&#x27;s interesting, though, that this approach in Python has led to several (4?) different popular type checkers, which AFAIK all use the same type hint syntax but apply different semantics. However for JavaScript, TypeScript seems to have become the one-and-only popular type checker.<p>In Python, I&#x27;ve even heard of people writing types in source code but never checking them, essentially using type hints as a more convenient syntax for comments. Support for ignoring types in Node.js would make that approach possible in JavaScript as well.",2024-07-25 05:57:37,41064351
41066554,BiteCode_dev,"Eventually, node might allow JS to introspect those types.<p>That would be a huge win. Right now in Python, great tools like pydantic exist because Python can introspect said types, and generate checks out of them.<p>This mean you can define simple types, and get:<p>- type checking
- run time data check
- api generation
- api document generation<p>Out of a single, standard notation.<p>Right now in JS, things like zod have to do:<p><pre><code>    const mySchema = z.string();
</code></pre>
Which is basically reinventing what typescript is already doing.",2024-07-25 05:57:37,41064351
41064589,samtheprogram,"Bun’s DX is pretty unprecedented in this space, and most of my use cases are now covered &#x2F; not causing Bun to crash (when actually using run-scripts with `bun run`).<p>Meanwhile, I can’t configure node to not require extensions on import, nor have tsc configured to automatically add .js extensions to its compiled output, without adding on a bundler… although native TypeScript support would remedy this nit quite a bit, I can’t imagine the user experience (or performance) to match Bun’s when it reaches stable.",2024-07-25 05:57:37,41064351
41070505,KrisGaudel,"This is really cool, excited to see where this goes!",2024-07-25 18:36:57,41069909
41070190,phren0logy,"I have only tried one search, but so far it&#x27;s impressive. I have been using elicit.com, but they seem to be taking a different approach that is less AI-heavy. I would definitely give this a shot for a few months.",2024-07-25 18:36:57,41069909
41069781,Already__Taken,"real quite high level sorry, most of your embedded projects going forward are MCU+fpga to do what? I thought a custom router but 284mbps isn&#x27;t nearly fast for a network.",2024-07-25 17:21:36,41068995
41068098,danlark,"Around 4 years ago I compared lots of different median algorithms and the article turned out to be much longer than I anticipated :)<p><a href=""https:&#x2F;&#x2F;danlark.org&#x2F;2020&#x2F;11&#x2F;11&#x2F;miniselect-practical-and-generic-selection-algorithms&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;danlark.org&#x2F;2020&#x2F;11&#x2F;11&#x2F;miniselect-practical-and-gene...</a>",2024-07-25 12:16:53,41066536
41068928,xinok,"&gt; P.S: In 2017 a new paper came out that actually makes the median-of-medians approach competitive with other selection algorithms. Thanks to the paper’s author, Andrei Alexandrescu for bringing it to my attention!<p>He also gave a talk about his algorithm in 2016. He&#x27;s an entertaining presenter, I highly recommended!<p>There&#x27;s Treasure Everywhere - Andrei Alexandrescu<p><a href=""https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=fd1_Miy1Clg"" rel=""nofollow"">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=fd1_Miy1Clg</a>",2024-07-25 12:16:53,41066536
41070389,kccqzy,"&gt; Quickselect gets us linear performance, but only in the average case. What if we aren’t happy to be average, but instead want to guarantee that our algorithm is linear time, no matter what?<p>I don&#x27;t agree with the need for this guarantee. Note that the article already says the selection of the pivot is by random. You can simply choose a very good random function to avoid an attacker crafting an input that needs quadratic time. You&#x27;ll never be unlucky enough for this to be a problem. This is basically the same kind of mindset that leads people into thinking, what if I use SHA256 to hash these two different strings to get the same hash?",2024-07-25 12:16:53,41066536
41070117,ncruces,"An implementation in Go, that&#x27;s (hopefully) simple enough to be understandable, yet minimally practical:<p><a href=""https:&#x2F;&#x2F;github.com&#x2F;ncruces&#x2F;sort&#x2F;blob&#x2F;main&#x2F;quick&#x2F;quick.go"">https:&#x2F;&#x2F;github.com&#x2F;ncruces&#x2F;sort&#x2F;blob&#x2F;main&#x2F;quick&#x2F;quick.go</a>",2024-07-25 12:16:53,41066536
41070083,jagged-chisel,It&#x27;s quicksort with a modification to select the median during the process. I feel like this is a good way to approach lots of &quot;find $THING in list&quot; questions.,2024-07-25 12:16:53,41066536
41066926,yoz,"Jordan Eldredge, the author, has done some amazing WinAmp-related projects over the years, including WebAmp (a web-based, from-scratch reimplementation of much of WinAmp) and a WASM engine for WinAmp-style music visualisation.<p>His project page: <a href=""https:&#x2F;&#x2F;jordaneldredge.com&#x2F;projects&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;jordaneldredge.com&#x2F;projects&#x2F;</a>",2024-07-25 07:14:57,41064645
41069557,sen,"I miss skinning so much. I was hugely into the scene of making&#x2F;releasing skins for any&#x2F;every program that included the ability (and a bunch that didn’t, thanks to unsigned applications).<p>To this day I’m the type to customise everything I own and I despise staring at generic looking programs all day. It’s even worse when it’s stuff like Discord that has a very opinionated style that won’t even respect the small amount of customisation my Linux theming gives me.<p>I feel like a huge reason the indie web died off was OSes and programs limiting user customisation which was a gateway drug for many.  MySpace themes would get people learning html&#x2F;css. Winamp skins got people learning photoshop&#x2F;graphics. mIRC scripting taught people basic coding. OS customising had all of it.  Now you just shut up and use it as they dictate.",2024-07-25 07:14:57,41064645
41067230,thenthenthen,"I remember “Sovereign Sect” as having something to do with skateboard(apparel)[1]. Not totally sure what or how.<p>[1]<a href=""https:&#x2F;&#x2F;www.thrashermagazine.com&#x2F;articles&#x2F;magazine&#x2F;the-regrouping-of-the-sovereign-sect&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;www.thrashermagazine.com&#x2F;articles&#x2F;magazine&#x2F;the-regro...</a>",2024-07-25 07:14:57,41064645
41067232,MaxGripe,"I’m mostly using Windows, so even today, it remains my main audio player. I use Winamp for FLACs and DI.fm streams",2024-07-25 07:14:57,41064645
41065440,pandemic_region,"I had an incredible deja-vu feeling on the guys standing around the hoop, so weird.",2024-07-25 07:14:57,41064645
41070511,rob,[delayed],2024-07-25 18:04:24,41069527
41070509,batch12,"When I did this, I found it to also be an interesting way to fingerprint users and find alternate accounts. I was able to match an old account I used in a top 10 similarity match out of all users.",2024-07-25 18:04:24,41069527
41070462,junon,"Would be interested in a study, unfeasible as it may be, on the social compatibility of people who have the strongest overlap between themselves and the next closest user.<p>Cool visualization and analysis, really well made!",2024-07-25 18:04:24,41069527
41070463,mattdesl,For the “terrain contours” is there something specific you’ve done to make it feel more cartographic? Or is it basically just marching cubes &#x2F; iso lines on some data points?<p>Looks fantastic. Very cool project.,2024-07-25 18:04:24,41069527
41070447,causal,This is really cool. Also a healthy reminder that anything we post publicly is likely to be analyzed. With a little analysis it&#x27;s probably easy to know me better than I know myself.,2024-07-25 18:04:24,41069527
